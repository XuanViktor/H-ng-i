You are given n​​​​​​ tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i​​​​​​th​​​​ task will be available to process at enqueueTimei and will take processingTimei to finish processing.

You have a single-threaded CPU that can process at most one task at a time and will act in the following way:

If the CPU is idle and there are no available tasks to process, the CPU remains idle.
If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.
Once a task is started, the CPU will process the entire task without stopping.
The CPU can finish a task then start a new one instantly.
Return the order in which the CPU will process the tasks.

 

Example 1:

Input: tasks = [[1,2],[2,4],[3,2],[4,1]]
Output: [0,2,3,1]
Explanation: The events go as follows: 
- At time = 1, task 0 is available to process. Available tasks = {0}.
- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.
- At time = 2, task 1 is available to process. Available tasks = {1}.
- At time = 3, task 2 is available to process. Available tasks = {1, 2}.
- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.
- At time = 4, task 3 is available to process. Available tasks = {1, 3}.
- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.
- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.
- At time = 10, the CPU finishes task 1 and becomes idle.


class Solution {
public:
    vector<int> getOrder(vector<vector<int>>& tasks) {
         ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
        // Lưu số lượng nhiệm vụ
        int n = tasks.size();
        
        // Tạo vector chứa chỉ số các nhiệm vụ từ 0 đến n-1
        vector<int> indices(n);
        for (int i = 0; i < n; ++i) {
            indices[i] = i;
        }
        
        // Sắp xếp các nhiệm vụ theo thời gian sẵn sàng
        sort(indices.begin(), indices.end(), [&](int i, int j) {
            return tasks[i][0] < tasks[j][0];
        });
        
        // Khởi tạo hàng đợi ưu tiên lưu trữ các nhiệm vụ
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        // Khởi tạo biến thời gian và chỉ số nhiệm vụ
        long long time = 0;
        int idx = 0;
        
        // Khởi tạo vector lưu trữ kết quả
        vector<int> result;

        
        // Thực hiện lập lịch cho các nhiệm vụ
        while (!pq.empty() || idx < n) {
            // Nếu hàng đợi rỗng và có nhiệm vụ sẵn
            if (pq.empty() && time < tasks[indices[idx]][0]) {
                time = tasks[indices[idx]][0]; // Di chuyển thời gian đến thời gian sẵn sàng của nhiệm vụ tiếp theo
            }
            // Thêm các nhiệm vụ có thời gian sẵn sàng bằng thời gian hiện tại vào hàng đợi ưu tiên
            while (idx < n && tasks[indices[idx]][0] <= time) {
                pq.push({tasks[indices[idx]][1], indices[idx]});
                idx++;
            }
            
            // Lấy ra và xử lý nhiệm vụ có thời gian xử lý ngắn nhất
            auto [processingTime, taskIndex] = pq.top();
            pq.pop();
            
            // Cập nhật thời gian và kết quả
            time += processingTime;
            result.push_back(taskIndex);
        }
        
        return result;
    }
};
