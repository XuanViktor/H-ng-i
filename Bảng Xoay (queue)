Có một chiếc bảng hình chữ nhật với 6 miếng ghép, trên mỗi miếng ghép
được điền một số nguyên trong khoảng từ 1 đến 6. Tại mỗi bước, chọn một hình vuông ( bên trái hoặc bên phải) rồi quay theo chiều kim đồng hồ

   4 1 3      <=     1 2 3    =>   1 5 2
   5 2 6             4 5 6         4 6 3

Yêu cầu: Cho một trạng thái của bảng, hãy tính số phép biến đổi ít nhất để đưa bảng đến trạng thái đích.

Input
Dòng đầu tiên ghi số lượng bộ test
Mỗi test gồm 2 dòng
Dòng đầu tiên chứa 6 số là trạng thái bảng ban đầu
Dòng thứ hai chứa 6 số là trạng thái bảng đích

Output 
với mỗi test, in ra một số nguyên là đáp án số của bài toán


Input
1
1 2 3 4 5 6
4 1 2 6 5 3

Output
2

#include "bits/stdc++.h"
using namespace std;

#define FOR(i, a, b)  for (int i = (a); i < (b); ++i) 

struct node{
    int a,b,c,d,e,f;
};

bool check(node n, node m){
    return (n.a == m.a && n.b == m.b && n.c == m.c && n.d == m.d && n.e == m.e && n.f == m.f);
}

void solve(){
    node n,m;
    cin >> n.a >> n.b >> n.c >> n.d >> n.e >> n.f;
    cin >> m.a >> m.b >> m.c >> m.d >> m.e >> m.f; 
    // TH cơ sở nếu bảng a == bảng b
    if (check(n,m)) {
        cout << 0 << '\n'; return;
    }
    queue<pair<node,int>> q;
    q.push({n,0});
    while (q.size()){
        node x = q.front().first; int d = q.front().second; q.pop();
        if (check(n,m)){
            cout << d << '\n'; return;
        }
        node k;
        // trai
        k.c = x.c; k.f = x.f; k.a = x.d;
        k.b = x.a; k.d = x.e; k.e = x.b;
        if (check(k,m)){
            cout << d + 1 << '\n';
            return;
        }
        q.push({k,d+1});

        //phai
        k.c = x.b; k.f = x.c; k.a = x.a;
        k.b = x.e; k.d = x.d; k.e = x.f;
        if (check(k,m)){
            cout << d + 1 << '\n';
            return;
        }
        q.push({k,d+1});
    }
}

int main(){
    int t; cin >> t;
    while(t--){
        solve();
    }
}

// Cách 2 dùng string
set<string> visited;
string s, t;

string xoay_trai(string s){
    string res = s;
    res[0] = s[3];
    res[1] = s[0];
    res[3] = s[4];
    res[4] = s[1];
    return res;
}

string xoay_phai(string s){
    string res = s;
    res[1] = s[4];
    res[2] = s[1];
    res[4] = s[5];
    res[5] = s[2];
    return res;
}

int bfs(){
    queue<pair<string,int>> q;
    q.push({s,0});
    visited.insert(s);
    while (!q.empty()){
        auto it = q.front(); q.pop();
        string u = it.first;
        int len = it.second;
        if (u == t) return len;
        string t1 = xoay_trai(u);
        string t2 = xoay_phai(u);
        if (!visited.count(t1)){
            q.push({t1, len + 1});
            visited.insert(t1);
        }
        if (!visited.count(t2)){
            q.push({t2, len + 1});
            visited.insert(t2);
        }
    }
}

string tachXau(string s){
    string res = "";
    for (char c : s){
        if (c != ' ') res += c;
    }
    return res;
}

int main(){
    FileIO();
    getline(cin,s);
    getline(cin,t);
    s = tachXau(s);
    t = tachXau(t);
    cout << bfs();
}
