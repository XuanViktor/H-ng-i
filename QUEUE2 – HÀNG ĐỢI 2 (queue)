Link: https://thptchuyen.ntucoder.net/Problem/Details/5738

QUEUE2 – HÀNG ĐỢI 2 
Một ứng dụng cơ bản nhất của hàng đợi đó là tìm đường đi có số bước đi là ít nhất có thể.  Bài toán đặt ra như sau: 
Trên một cánh đồng có thể được chia thành n hàng và m cột, gồm có các đối tượng và kí hiệu  như sau: 
C: Bò Bessie *: Bãi cỏ #: Tảng đá .: Ô trống 
Bò Bessie của chúng ta hôm nay đang rất đói, vì thế nên nó muốn tìm đến bãi cỏ gần nhất để có thể ăn nó. Biết rằng Bessie chỉ có thể di chuyển từ 1 ô đến ô khác chung cạnh, và nó không  thể đi xuyên tảng đá. 
Yêu cầu: Cho n hàng, m cột và mô tả của cánh đồng, tìm số bước đi ít nhất để Bessie có thể ăn cỏ 
Input: 
∙ Dòng đầu là 2 số n, m (3 ≤ n, m  ≤ 20) 
∙ n dòng tiếp theo, mỗi dòng gồm n kí tự với các loại như trên 
∙ Input đảm bảo có đúng 1 kí tự Cvà ít nhất 1 kí tự * 
Output: 
∙ Đưa ra số bước đi ít nhất của Bessie, nếu không có cách để ăn cỏ thì in ra −1 

4 5 
..*.. 
..#.. 
.#... 

6

#include <bits/stdc++.h>
using namespace std;

int n, m;
int a[1005][1005];
pair<int,int> move0[4] = {{-1,0}, {0,-1}, {0,1}, {1,0}}; // edges
queue<pair<pair<int,int>,int> > q;

#define FOR(i, a, b)  for (int i = (a); i < (b); ++i) 
#define  fi first
#define  se second

void input(){
    cin >> n >> m;
    FOR(i,1,n+1){
        FOR(j,1,m+1){
            char c; cin >> c;
            if (c == '#') a[i][j] = 1;
            else if (c == '.') a[i][j] = 2;
            else if (c == '*') a[i][j] = 3;
            else{
                q.push({{i,j},0});
                a[i][j] = 0; // mark as visited
            }
        }
    }
}

int bfs(){
    while (!q.empty()){
        pair<pair<int,int>,int> t = q.front(); q.pop();
        int i = t.fi.fi, j = t.fi.se, d = t.se;
        if (a[i][j] == 3) return d;
        for (int k = 0; k < 4; k++){
            int i1 = i + move0[k].fi;
            int j1 = j + move0[k].se;
            if (i1 >= 1 && i1 <= n && j1 >= 1 && j1 <= m && a[i1][j1] != 1){
                if (a[i1][j1] == 3)  return d + 1;
                a[i1][j1] = 0;
                q.push({{i1,j1},d + 1});
            }
        } 
    }
    return -1;
}

int main(){
    input();
    cout << bfs();
}
